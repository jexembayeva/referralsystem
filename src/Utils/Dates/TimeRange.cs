using System;
using Utils.Helpers;

namespace Utils.Dates
{
    /// <summary>
    /// Represents a range of time between two dates: <see cref="From"/> and <see cref="To"/>.
    /// <see cref="From"/> is always earlier than <see cref="To"/>. Otherwise, an exception will be thrown.
    /// </summary>
    public class TimeRange
    {
        public static DateTimeOffset Max { get; } = new Date(2100, 12, 31).EndOfTheDay();

        public static DateTimeOffset Min { get; } = new Date(2000, 1, 1).StartOfTheDay();

        private readonly Date _from;

        private readonly Date _to;

        /// <summary>
        /// Gets start of the range.
        /// </summary>
        public DateTimeOffset From { get; }

        /// <summary>
        /// Gets finish date of the range.
        /// </summary>
        public DateTimeOffset To { get; }

        public TimeRange(Date date)
            : this(date, date)
        {
        }

        public TimeRange(Date from, Date to)
        {
            from.ThrowIfNull(nameof(from));
            to.ThrowIfNull(nameof(to));

            _from = from;
            _to = to;

            if (_from.Later(_to))
            {
                throw new InvalidOperationException($"'{nameof(From)}' should not be later than '{nameof(To)}'");
            }

            From = _from.StartOfTheDay();
            To = _to.EndOfTheDay();

            if (From.Earlier(Min) || From.Later(Max))
            {
                throw new InvalidOperationException($"The 'From':{From} is invalid date");
            }

            if (To.Earlier(Min) || To.Later(Max))
            {
                throw new InvalidOperationException($"The 'To':{To} is invalid date");
            }
        }

        public override string ToString()
        {
            return $"{GetType().Name}. [{_from}:{_to}]";
        }

        public override bool Equals(object obj)
        {
            return obj != null && Equals(obj as TimeRange);
        }

        // was generated by Resharper
        public override int GetHashCode()
        {
            unchecked
            {
                return (_from.Source.GetHashCode() * 397) ^ _to.Source.GetHashCode();
            }
        }

        public bool Equals(TimeRange range)
        {
            return range != null && From.Equal(range.From) && To.Equal(range.To);
        }
    }
}